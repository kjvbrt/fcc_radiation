#!/usr/bin/env python

import argparse
import ROOT
import os

ROOT.gROOT.SetBatch(True)


class Plots:
    '''
    Class to store samples, selection types and utils
    '''
    def __init__(self, args):
        self.args = args
        self.samples = ['ggall4', 'tautau5', 'qqbar6',
                        'ggall7', 'tautau8', 'qqbar9']
        self.sums = [['ggall7', 'tautau8', 'qqbar9'],
                     ['ggall4', 'tautau5', 'qqbar6']]
        self.selection_types = ['all', 'charged', 'neutral', 'no_neutrino',
                                'neutral_no_neutrino',
                                'neutrinos', 'neutrons', 'photons',
                                'electrons', 'protons', 'muons', 'pions',
                                'kaons', 'deuterons', 'lambdas', 'other']
        self.sel_types_titles = ['', ' (charged)', ' (neutral)',
                                 ' (no neutrino)', ' (neutral, no neutrino)',
                                 ' (neutrinos)', ' (neutrons)', ' (photons)',
                                 ' (electrons)', ' (protons)', ' (muons)',
                                 ' (pions)', ' (kaons)', ' (deuterons)',
                                 ' (lambdas)', ' (other)']

    def get_hist_array(self, infile, hist_stem):
        '''
        Load histogram array from file
        '''
        ROOT.gStyle.SetOptStat(0)
        ROOT.gROOT.ForceStyle()
        all_hists = {}
        for seltype in self.selection_types:
            hist_coll = {}
            for sample in self.samples:
                hist = infile.Get(hist_stem + '_' + seltype + '_' + sample)
                hist.SetDirectory(0)
                hist_coll[sample] = hist

            for i, sum_list in enumerate(self.sums):
                hist_list = ROOT.TList()
                for sample in sum_list:
                    hist_list.Add(hist_coll[sample])
                hist_sum = hist_coll[sum_list[0]].Clone(hist_stem + '_' +
                                                        seltype + '_sum' +
                                                        str(i))
                hist_sum.Reset()
                hist_sum.Merge(hist_list)
                hist_coll['sum' + str(i)] = hist_sum

            all_hists[seltype] = hist_coll

        return all_hists


    def plot_hist_array(self, hist_arr, plot_title=None, logx=False,
                        hist_min=None, hist_max=None):
        '''
        Plot histograms in the array
        '''

        canvas = ROOT.TCanvas('canvas', 'canvas', 400, 300)
        canvas.SetLogy(1)
        if logx:
            canvas.SetLogx(1)
        ROOT.gPad.SetRightMargin(0.05)

        legend = ROOT.TLegend(0.13, 0.6, 0.65, 0.9)
        legend.SetFillStyle(0)
        legend.SetBorderSize(0)

        for seltype, seltitle in zip(self.selection_types,
                                     self.sel_types_titles):
            histcoll = hist_arr[seltype]
            legend.Clear()
            if not hist_max:
                hist_max = get_hist_max(
                    ['sum0', 'ggall7', 'tautau8', 'qqbar9', 'sum1'],
                    histcoll)
            if not hist_min:
                hist_min = get_hist_min(
                    ['sum0', 'ggall7', 'tautau8', 'qqbar9', 'sum1'],
                    histcoll)

            if plot_title:
                histcoll['sum0'].SetTitle(plot_title + seltitle)
            histcoll['sum0'].SetLineColor(ROOT.kBlack)
            histcoll['sum0'].SetLineWidth(2)
            histcoll['sum0'].SetMinimum(hist_min)
            histcoll['sum0'].SetMaximum(hist_max)
            histcoll['sum0'].GetXaxis().SetTitleOffset(1.4)
            legend.AddEntry(histcoll['sum0'],
                            'Sum (CLD, no Yoke, no ECal)',
                            'L')
            histcoll['sum0'].Draw('HIST')

            histcoll['ggall7'].SetLineColor(ROOT.kRed + 1)
            histcoll['ggall7'].SetLineWidth(2)
            legend.AddEntry(
                histcoll['ggall7'],
                'e^{+}e^{-} #rightarrow #gamma #gamma #rightarrow f #bar{f}',
                'L')
            histcoll['ggall7'].Draw('HIST SAME')

            histcoll['tautau8'].SetLineColor(ROOT.kGreen + 3)
            histcoll['tautau8'].SetLineWidth(2)
            legend.AddEntry(
                histcoll['tautau8'],
                'e^{+}e^{-} #rightarrow #tau^{+} #tau^{-}',
                'L')
            histcoll['tautau8'].Draw('HIST SAME')

            histcoll['qqbar9'].SetLineColor(ROOT.kMagenta - 3)
            histcoll['qqbar9'].SetLineWidth(2)
            legend.AddEntry(
                histcoll['qqbar9'],
                'e^{+}e^{-} #rightarrow q #bar{q}',
                'L')
            histcoll['qqbar9'].Draw('HIST SAME')

            histcoll['sum1'].SetLineColor(ROOT.kBlue - 3)
            histcoll['sum1'].SetLineWidth(2)
            legend.AddEntry(
                histcoll['sum1'],
                'Sum (Full CLD)',
                'L')
            histcoll['sum1'].Draw('HIST SAME')

            legend.Draw()

            hist_path = self.args.out_dir + '/' + histcoll['sum0'].GetName() + \
                        '.' + self.args.out_format
            hist_path = hist_path.replace('_sum0', '')
            canvas.Print(hist_path)


    def plot_hist_array_2d(self, hist_arr, plot_title=None, z_title=None):
        '''
        Plot 2D histograms in the array
        '''

        canvas = ROOT.TCanvas('canvas', 'canvas', 500, 400)
        ROOT.gPad.SetRightMargin(0.15)

        for seltype, seltitle in zip(self.selection_types,
                                     self.sel_types_titles):
            histcoll = hist_arr[seltype]
            for sumid in ['sum0', 'sum1']:
                if plot_title:
                    histcoll[sumid].SetTitle(plot_title + seltitle)
                histcoll[sumid].GetZaxis().SetTitleOffset(1.4)
                if z_title:
                    histcoll[sumid].GetZaxis().SetTitle(z_title)
                histcoll[sumid].Draw('COLZ')
                hist_path = self.args.out_dir + '/' + \
                            histcoll[sumid].GetName() + \
                            '.' + self.args.out_format
                # hist_path = hist_path.replace('_sum1', '')
                canvas.Print(hist_path)


    def get_hist_array_avg(self, hist_arr, hist_stem, y_title):
        '''
        Do average of 2D histograms from the array
        '''

        all_hists = {}
        for seltype in self.selection_types:
            hist_coll = {}
            for sample in self.samples:
                hist2d = hist_arr[seltype][sample]

                histname = hist_stem + '_' + seltype + '_' + sample
                hist = hist2d.ProjectionX(histname)
                hist.Scale(1./hist2d.GetNbinsY())
                hist.GetYaxis().SetTitle(y_title)

                hist_coll[sample] = hist

            for i, sum_list in enumerate(self.sums):
                hist_list = ROOT.TList()
                for sample in sum_list:
                    hist_list.Add(hist_coll[sample])
                hist_sum = hist_coll[sum_list[0]].Clone(hist_stem + '_' +
                                                        seltype + '_sum' +
                                                        str(i))
                hist_sum.Reset()
                hist_sum.Merge(hist_list)
                hist_coll['sum' + str(i)] = hist_sum

            all_hists[seltype] = hist_coll

        return all_hists


def get_hist_max(sample_names, hist_coll, log=True):
    hist_max = -1e60
    for sample in sample_names:
        hist = hist_coll[sample]
        hmax = hist.GetBinContent(hist.GetMaximumBin())
        if hmax > hist_max:
            hist_max = hmax

    if log:
        hist_max *= 7
    else:
        hist_max *= 1.1

    return hist_max


def get_hist_min(sample_names, hist_coll, log=True):
    hist_min = 1e60
    for sample in sample_names:
        hist = hist_coll[sample]
        hmin = hist.GetBinContent(hist.GetMaximumBin())
        if hmin < hist_min:
            if log and hmin <= 0:
                continue
            hist_min = hmin

    if log:
        if hist_min <= 0:
            hist_min = get_hist_max(sample_names, hist_coll, log)*1e-6
        hist_min *= 0.3
    else:
        hist_min *= 0.9

    return hist_min


def main():
    parser = argparse.ArgumentParser(description='Yay, let\'s plot flux!')

    parser.add_argument('-i', '--input-file',
                        type=str,
                        default='plots.root',
                        help='input root file')
    parser.add_argument('-f', '--out-format',
                        type=str,
                        default='png',
                        help='output format of the plots')
    parser.add_argument('-o', '--out-dir',
                        type=str,
                        default='sum_plots',
                        help='output directory for the plots')

    args = parser.parse_args()

    plots = Plots(args)

    if not os.path.exists(args.out_dir):
        os.makedirs(args.out_dir)

    infile = ROOT.TFile(args.input_file, 'READ')

    hist_arr_hits_z = plots.get_hist_array(infile, 'hits_z')
    hist_arr_hits_z_energy = plots.get_hist_array(infile, 'hits_z_energy')
    hist_arr_particle_energy = plots.get_hist_array(infile, 'particle_energy')
    hist_arr_fluence_z_phi = plots.get_hist_array(infile, 'fluence_z_phi')
    hist_arr_energy_fluence_z_phi = plots.get_hist_array(infile,
                                                         'energy_fluence_z_phi')
    hist_arr_dose_z_phi = plots.get_hist_array(infile, 'dose_z_phi')
    hist_arr_edose_z_phi = plots.get_hist_array(infile, 'edose_z_phi')

    plots.plot_hist_array(hist_arr_hits_z, 'Number of particles')
    plots.plot_hist_array(hist_arr_hits_z_energy,
                          '#Sigma kin. energy of particles')
    plots.plot_hist_array(hist_arr_particle_energy,
                          'Kin. energy of particles',
                          logx=True)

    plots.plot_hist_array_2d(hist_arr_fluence_z_phi, 'Particle fluence')
    plots.plot_hist_array_2d(hist_arr_energy_fluence_z_phi,
                             'Energy fluence')
    plots.plot_hist_array_2d(hist_arr_dose_z_phi, 'Dose')
    plots.plot_hist_array_2d(hist_arr_edose_z_phi, 'Effective dose',
                             'Effective dose [Sv h]')

    hist_arr_fluence_z_avg = plots.get_hist_array_avg(
        hist_arr_fluence_z_phi,
        'fluence_z_avg',
        'Avg. particle fluence [cm^{-2}]')
    hist_arr_energy_fluence_z_avg = plots.get_hist_array_avg(
        hist_arr_energy_fluence_z_phi,
        'energy_fluence_z_avg',
        'Avg. energy fluence [GeV cm^{-2}]')
    hist_arr_dose_z_avg = plots.get_hist_array_avg(
        hist_arr_dose_z_phi,
        'dose_z_avg',
        'Avg. dose [Gy h]')
    hist_arr_edose_z_avg = plots.get_hist_array_avg(
        hist_arr_edose_z_phi,
        'edose_z_avg',
        'Avg. effective dose [Sv h]')

    plots.plot_hist_array(hist_arr_fluence_z_avg, 'Avg. particle fluence',
                          hist_min=5e-5, hist_max=1e2)
    plots.plot_hist_array(hist_arr_energy_fluence_z_avg, 'Avg. energy fluence',
                          hist_min=5e-6, hist_max=5e1)
    plots.plot_hist_array(hist_arr_dose_z_avg, 'Avg. dose',
                          hist_min=1e-10, hist_max=3e-4)
    plots.plot_hist_array(hist_arr_edose_z_avg, 'Avg. effective dose',
                          hist_min=5e-11, hist_max=1e-3)

if __name__ == '__main__':
    main()
